  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   HAProxy Ingress Controller
# #   --------------------------
# #   This file is automatically updated, do not edit
# #
#
{{- $cfg := . }}
{{- $global := $cfg.Global }}
global
    daemon
{{- if $global.UseHAProxyUser }}
    user haproxy
    group haproxy
{{- end }}
    unix-bind user haproxy group haproxy mode 0600
{{- if $global.UseChroot }}
    chroot /var/empty
{{- end }}
{{- if gt $global.Procs.Nbproc 1 }}
    nbproc {{ $global.Procs.Nbproc }}
{{- end }}
{{- if gt $global.Procs.Nbthread 1 }}
    nbthread {{ $global.Procs.Nbthread }}
{{- end }}
{{- if $global.Procs.CPUMap }}
    cpu-map {{ $global.Procs.CPUMap }}
{{- end }}
    stats socket {{ default "--" $global.AdminSocket }} level admin expose-fd listeners mode 600
        {{- if gt $global.Procs.Nbproc 1 }} process 1{{ end }}
{{- if $global.LoadServerState }}
    server-state-file state-global
    server-state-base /var/lib/haproxy/
{{- end }}
    maxconn {{ $global.MaxConn }}
{{- if $global.Timeout.Stop }}
    hard-stop-after {{ $global.Timeout.Stop }}
{{- end }}
{{- if $global.Syslog.Endpoint }}
    log {{ $global.Syslog.Endpoint }} len {{ $global.Syslog.Length }} format {{ $global.Syslog.Format }} local0
    log-tag {{ $global.Syslog.Tag }}
{{- end }}
    lua-load /usr/local/etc/haproxy/lua/auth-request.lua
    lua-load /usr/local/etc/haproxy/lua/services.lua
{{- if $global.SSL.DHParam.Filename }}
    ssl-dh-param-file {{ $global.SSL.DHParam.Filename }}
{{- else }}
    tune.ssl.default-dh-param {{ $global.SSL.DHParam.DefaultMaxSize }}
{{- end }}
{{- if $global.SSL.Engine }}
    ssl-engine {{ $global.SSL.Engine }}
{{- if $global.SSL.ModeAsync }}
    ssl-mode-async
{{- end }}
{{- end }}
{{- if $global.SSL.Ciphers }}
    ssl-default-bind-ciphers {{ $global.SSL.Ciphers }}
{{- end }}
{{- if $global.SSL.CipherSuites }}
    ssl-default-bind-ciphersuites {{ $global.SSL.CipherSuites }}
{{- end }}
{{- if $global.SSL.Options }}
    ssl-default-bind-options {{ $global.SSL.Options }}
{{- end }}
{{- if $global.SSL.BackendCiphers }}
    ssl-default-server-ciphers {{ $global.SSL.BackendCiphers }}
{{- end }}
{{- if $global.SSL.BackendCipherSuites }}
    ssl-default-server-ciphersuites {{ $global.SSL.BackendCipherSuites }}
{{- end }}
{{- if $global.SSL.BackendOptions }}
    ssl-default-server-options {{ $global.SSL.BackendOptions }}
{{- end }}
{{- range $snippet := $global.CustomConfig }}
    {{ $snippet }}
{{- end }}

defaults
    log global
{{- if $global.LoadServerState }}
    load-server-state-from-file global
{{- end }}
    maxconn {{ $global.MaxConn }}
{{- if $global.DrainSupport.Drain }}
    option persist
{{- if $global.DrainSupport.Redispatch }}
    option redispatch
{{- end }}
{{- else }}
    option redispatch
{{- end }}
    option dontlognull
    option http-server-close
    option http-keep-alive
{{- if $global.UseHTX }}
    option http-use-htx
{{- end }}
    timeout client          {{ default "--" $global.Timeout.Client }}
{{- if $global.Timeout.ClientFin }}
    timeout client-fin      {{ $global.Timeout.ClientFin }}
{{- end }}
    timeout connect         {{ default "--" $global.Timeout.Connect }}
{{- if $global.Timeout.KeepAlive }}
    timeout http-keep-alive {{ $global.Timeout.KeepAlive }}
{{- end }}
{{- if $global.Timeout.HTTPRequest }}
    timeout http-request    {{ $global.Timeout.HTTPRequest }}
{{- end }}
{{- if $global.Timeout.Queue }}
    timeout queue           {{ $global.Timeout.Queue }}
{{- end }}
    timeout server          {{ default "--" $global.Timeout.Server }}
{{- if $global.Timeout.ServerFin }}
    timeout server-fin      {{ $global.Timeout.ServerFin }}
{{- end }}
{{- if $global.Timeout.Tunnel }}
    timeout tunnel          {{ $global.Timeout.Tunnel }}
{{- end }}
{{- range $snippet := $global.CustomDefaults }}
    {{ $snippet }}
{{- end }}

{{- if $global.DNS.Resolvers }}

  # # # # # # # # # # # # # # # # # # #
# #
#     DNS RESOLVERS
#
{{- range $resolver := $global.DNS.Resolvers }}
resolvers {{ $resolver.Name }}
{{- range $ns := $resolver.Nameservers }}
    nameserver {{ $ns.Name }} {{ $ns.Endpoint }}
{{- end }}
    accepted_payload_size {{ $resolver.AcceptedPayloadSize }}
    hold obsolete         {{ $resolver.HoldObsolete }}
    hold valid            {{ $resolver.HoldValid }}
    timeout retry         {{ $resolver.TimeoutRetry }}
{{- end }}
{{- end }}

{{- $userlists := $cfg.Userlists }}
{{- if $userlists }}

  # # # # # # # # # # # # # # # # # # #
# #
#     USER LISTS
#
{{- range $userlist := $userlists }}
userlist {{ $userlist.Name }}
{{- range $user := $userlist.Users }}
    user {{ $user.Name }} {{ if not $user.Encrypted }}insecure-{{ end }}password {{ $user.Passwd }}
{{- end }}
{{- end }}
{{- end }}

{{- if $cfg.TCPBackends }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   TCP SERVICES
# #
#

{{- range $backend := $cfg.TCPBackends }}
listen _tcp_{{ $backend.Name }}_{{ $backend.Port }}
{{- $ssl := $backend.SSL }}
    bind {{ $global.Bind.TCPBindIP }}:{{ $backend.Port }}
        {{- if $ssl.Filename }} ssl crt {{ $ssl.Filename }}{{ end }}
        {{- if $backend.ProxyProt.Decode }} accept-proxy{{ end }}
    mode tcp

{{- /*------------------------------------*/}}
{{- if $global.UseHTX }}
    no option http-use-htx
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $global.Syslog.TCPLogFormat "default" }}
    option tcplog
{{- else if $global.Syslog.TCPLogFormat }}
    log-format {{ $global.Syslog.TCPLogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $outProxyProtVersion := $backend.ProxyProt.EncodeVersion }}
{{- range $ep := $backend.Endpoints }}
    server {{ $ep.Name }} {{ $ep.Target }}
        {{- if $backend.CheckInterval }} check port {{ $ep.Port }} inter {{ $backend.CheckInterval }}{{ end }}
        {{- if eq $outProxyProtVersion "v1" }} send-proxy
            {{- else if eq $outProxyProtVersion "v2" }} send-proxy-v2
        {{- end }}
{{- end }}

{{- end }}{{/* range TCPBackends */}}
{{- end }}{{/* if has TCPBackend */}}

{{- if $cfg.Backends }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   BACKENDS
# #
#
{{- range $backend := $cfg.Backends }}
backend {{ $backend.ID }}
    mode {{ if $backend.ModeTCP }}tcp{{ else }}http{{ end }}
{{- if $backend.BalanceAlgorithm }}
    balance {{ $backend.BalanceAlgorithm }}
{{- end }}
{{- $timeout := $backend.Timeout }}
{{- if $timeout.Connect }}
    timeout connect {{ $timeout.Connect }}
{{- end }}
{{- if $timeout.KeepAlive }}
    timeout http-keep-alive {{ $timeout.KeepAlive }}
{{- end }}
{{- if $timeout.HTTPRequest }}
    timeout http-request {{ $timeout.HTTPRequest }}
{{- end }}
{{- if $timeout.Queue }}
    timeout queue {{ $timeout.Queue }}
{{- end }}
{{- if $timeout.Server }}
    timeout server {{ $timeout.Server }}
{{- end }}
{{- if $timeout.ServerFin }}
    timeout server-fin {{ $timeout.ServerFin }}
{{- end }}
{{- if $timeout.Tunnel }}
    timeout tunnel {{ $timeout.Tunnel }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $backend.Limit.Connections $backend.Limit.RPS }}
    stick-table type ip size 200k expire 5m store conn_cur,conn_rate(1s)
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.HealthCheck.URI }}
    option httpchk {{ $backend.HealthCheck.URI }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*              MODE TCP              */}}
{{- /*------------------------------------*/}}
{{- if $backend.ModeTCP }}

{{- /*------------------------------------*/}}
{{- if $global.UseHTX }}
    no option http-use-htx
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.WhitelistTCP }}
{{- range $w1 := short 10 $backend.WhitelistTCP }}
    acl wlist_src src{{ range $w := $w1 }} {{ $w }}{{ end }}
{{- end }}
    tcp-request content reject if !wlist_src
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $backend.Limit.RPS $backend.Limit.Connections }}
    tcp-request content track-sc1 src
{{- if $backend.Limit.Whitelist }}
{{- range $w1 := short 10 $backend.Limit.Whitelist }}
    acl wlist_conn src{{ range $w := $w1 }} {{ $w }}{{ end }}
{{- end }}
{{- end }}
{{- if $backend.Limit.Connections }}
    tcp-request content reject if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_cur gt {{ $backend.Limit.Connections }} }
{{- end }}
{{- if $backend.Limit.RPS }}
    tcp-request content reject if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_rate gt {{ $backend.Limit.RPS }} }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*             MODE HTTP              */}}
{{- /*------------------------------------*/}}
{{- else }}{{/*** if $backend.ModeTCP ***/}}

{{- /*------------------------------------*/}}
{{- $hasFrontingProxy := $global.Bind.HasFrontingProxy }}
{{- if $backend.HSTS }}
    acl https-request ssl_fc
{{- if $hasFrontingProxy }}
    acl https-request var(txn.proto) https
{{- end }}
{{- end }}
{{- if $backend.TLS.HasTLSAuth }}
    acl local-offload ssl_fc
{{- end }}

{{- /*------------------------------------*/}}
{{- if and $hasFrontingProxy $backend.HSTS }}
    http-request set-var(txn.proto) hdr(X-Forwarded-Proto)
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $backend.Limit.RPS $backend.Limit.Connections }}
    http-request track-sc1 src
{{- if $backend.Limit.Whitelist }}
{{- range $w1 := short 10 $backend.Limit.Whitelist }}
    acl wlist_conn src{{ range $w := $w1 }} {{ $w }}{{ end }}
{{- end }}
{{- end }}
{{- if $backend.Limit.Connections }}
    http-request deny deny_status 429 if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_cur gt {{ $backend.Limit.Connections }} }
{{- end }}
{{- if $backend.Limit.RPS }}
    http-request deny deny_status 429 if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_rate gt {{ $backend.Limit.RPS }} }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.NeedACL }}
{{- range $path := reverse $backend.Paths }}
    # {{ $path.ID }} = {{ $path.Hostpath }}
{{- end }}
    http-request set-var(txn.pathID) base,lower,map_beg({{ $backend.PathsMap.MatchFile }})
{{- end }}

{{- /*------------------------------------*/}}
{{- range $i, $wlistCfg := $backend.WhitelistHTTP }}
{{- $wlist := $wlistCfg.Config }}
{{- if $wlist }}
{{- range $w1 := short 10 $wlist }}
    acl wlist_src{{ $i }} src{{ range $w := $w1 }} {{ $w }}{{ end }}
{{- end }}
    http-request deny if
        {{- if gt (len $backend.WhitelistHTTP) 1 }} { var(txn.pathID) {{ $wlistCfg.Paths.IDList }} }{{ end }}
        {{- "" }} !wlist_src{{ $i }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $needACL := gt (len $backend.AuthHTTP) 1 }}
{{- range $authCfg := $backend.AuthHTTP }}
{{- if $authCfg.UserlistName }}
    http-request auth
        {{- if $authCfg.Realm }} realm "{{ $authCfg.Realm }}"{{ end }}
        {{- "" }} if{{ if and $backend.HasCorsEnabled }} !METH_OPTIONS{{ end }}
        {{- if $needACL }} { var(txn.pathID) {{ $authCfg.Paths.IDList }} }{{ end }}
        {{- "" }} !{ http_auth({{ $authCfg.UserlistName }}) }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if and $global.ModSecurity.Endpoints $backend.HasModsec }}
    filter spoe engine modsecurity config /etc/haproxy/spoe-modsecurity.conf
{{- $needACL := gt (len $backend.WAF) 1 }}
{{- range $waf := $backend.WAF }}
{{- if eq $waf.Config.Mode "deny" }}
    http-request deny if { var(txn.modsec.code) -m int gt 0 }
        {{- if $needACL }} { var(txn.pathID) {{ $waf.Paths.IDList }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.TLS.HasTLSAuth }}
{{- $needSSLACL := not $backend.HasSSLRedirect }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-CN   %{+Q}[ssl_c_s_dn(cn)]{{ if $needSSLACL }}   if local-offload{{ end }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-DN   %{+Q}[ssl_c_s_dn]{{ if $needSSLACL }}       if local-offload{{ end }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1 %{+Q}[ssl_c_sha1,hex]{{ if $needSSLACL }}   if local-offload{{ end }}
{{- if $backend.TLS.AddCertHeader }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-Cert %{+Q}[ssl_c_der,base64]{{ if $needSSLACL }} if local-offload{{ end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $needACL := gt (len $backend.Cors) 1 }}
{{- range $corsCfg := $backend.Cors }}
{{- $cors := $corsCfg.Config }}
{{- if $cors.Enabled }}
{{- $paths := $corsCfg.Paths }}
    http-request set-var(txn.cors_max_age) str({{ $cors.MaxAge }}) if METH_OPTIONS
        {{- if $needACL }} { var(txn.pathID) {{ $paths.IDList }} }{{ end }}
    http-request use-service lua.send-cors-preflight if METH_OPTIONS
        {{- if $needACL }} { var(txn.pathID) {{ $paths.IDList }} }{{ end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if eq $global.ForwardFor "add" }}
    http-request set-header X-Original-Forwarded-For %[hdr(x-forwarded-for)] if { hdr(x-forwarded-for) -m found }
    http-request del-header x-forwarded-for
    option forwardfor
{{- else if eq $global.ForwardFor "update" }}
    option forwardfor
{{- else if eq $global.ForwardFor "ifmissing" }}
    option forwardfor if-none
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.OAuth.Impl }}
{{- $oauth := $backend.OAuth }}
{{- if eq $oauth.Impl "oauth2_proxy" }}
    http-request set-header X-Real-IP %[src]
    http-request lua.auth-request {{ $oauth.BackendName }} {{ $oauth.URIPrefix }}/auth
    http-request redirect location {{ $oauth.URIPrefix }}/start?rd=%[path] if !{ path_beg {{ $oauth.URIPrefix }}/ } !{ var(txn.auth_response_successful) -m bool }
{{- range $header, $attr := $oauth.Headers }}
    http-request set-header {{ $header }} %[var(txn.{{ $attr }})] if { var(txn.{{ $attr }}) -m found }
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.Cookie.Name }}
{{- $cookie := $backend.Cookie }}
    cookie {{ $cookie.Name }} {{ $cookie.Strategy }}
        {{- if $cookie.Keywords }} {{ $cookie.Keywords }}{{ end }}
        {{- if $cookie.Shared }}
            {{- range $hostname := $backend.Hostnames }} domain {{ $hostname }}{{ end }}
        {{- end }}
        {{- if $cookie.Dynamic }} dynamic{{ end }}
{{- if $cookie.Dynamic }}
    dynamic-cookie-key "{{ $global.Cookie.Key }}"
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $backend.CustomConfig }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $needACL := gt (len $backend.RewriteURL) 1 }}
{{- range $rewriteCfg := $backend.RewriteURL }}
{{- $rewrite := $rewriteCfg.Config }}
{{- if $rewrite }}
{{- range $path := $rewriteCfg.Paths.Items }}
{{- if eq $rewrite "/" }}
    reqrep ^([^:\ ]*)\ {{ $path.Path }}/?(.*)$     \1\ {{ $rewrite }}\2
        {{- if $needACL }}     if { var(txn.pathID) {{ $path.ID }} }{{ end }}
{{- else }}
    reqrep ^([^:\ ]*)\ {{ $path.Path }}(.*)$       \1\ {{ $rewrite }}{{ if hasSuffix $path.Path "/" }}/{{ end }}\2
        {{- if $needACL }}     if { var(txn.pathID) {{ $path.ID }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $needACL := gt (len $backend.HSTS) 1 }}
{{- range $hstsCfg := $backend.HSTS }}
{{- $hsts := $hstsCfg.Config }}
{{- if $hsts.Enabled }}
{{- $paths := $hstsCfg.Paths }}
{{- $needSSLACL := not ($backend.HasSSLRedirectPaths $paths) }}
    http-response set-header Strict-Transport-Security "max-age={{ $hsts.MaxAge }}
        {{- if $hsts.Subdomains }}; includeSubDomains{{ end }}
        {{- if $hsts.Preload }}; preload{{ end }}"
        {{- if or $needSSLACL $needACL }} if
            {{- if $needSSLACL }} https-request{{ end }}
            {{- if $needACL }} { var(txn.pathID) {{ $paths.IDList }} }{{ end }}
        {{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $needACL := gt (len $backend.Cors) 1 }}
{{- range $corsCfg := $backend.Cors }}
{{- $cors := $corsCfg.Config }}
{{- if $cors.Enabled }}
{{- $paths := $corsCfg.Paths }}
    http-response set-header Access-Control-Allow-Origin  "{{ $cors.AllowOrigin }}"
        {{- if $needACL }} if { var(txn.pathID) {{ $paths.IDList }} }{{ end }}
    http-response set-header Access-Control-Allow-Methods "{{ $cors.AllowMethods }}"
        {{- if $needACL }} if { var(txn.pathID) {{ $paths.IDList }} }{{ end }}
    http-response set-header Access-Control-Allow-Headers "{{ $cors.AllowHeaders }}"
        {{- if $needACL }} if { var(txn.pathID) {{ $paths.IDList }} }{{ end }}
{{- if $cors.AllowCredentials }}
    http-response set-header Access-Control-Allow-Credentials "{{ $cors.AllowCredentials }}"
        {{- if $needACL }} if { var(txn.pathID) {{ $paths.IDList }} }{{ end }}
{{- end }}
{{- if $cors.ExposeHeaders }}
    http-response set-header Access-Control-Expose-Headers "{{ $cors.ExposeHeaders }}"
        {{- if $needACL }} if { var(txn.pathID) {{ $paths.IDList }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}{{/*** if $backend.ModeTCP ***/}}

{{- /*------------------------------------*/}}
{{- if $backend.Resolver }}
{{- $portIsNumber := ne (int64 $backend.Port) 0 }}
    server-template srv {{ len $backend.Endpoints }}
        {{- " " }}{{ if not $portIsNumber }}_{{ $backend.Port }}._tcp.{{ end }}
        {{- $backend.Name }}.{{ $backend.Namespace }}.svc.{{ $global.DNS.ClusterDomain }}
        {{- if $portIsNumber }}:{{ $backend.Port }}{{ end }}
        {{- "" }} resolvers {{ $backend.Resolver }} resolve-prefer ipv4 init-addr none
        {{- "" }} weight {{ $backend.Server.InitialWeight }}
        {{- template "backend" map $backend }}
{{- else }}
{{- /* Iterate twice because header takes precedence */}}
{{- if $backend.BlueGreen.HeaderName }}
{{- range $ep := $backend.Endpoints }}
{{- if $ep.Label }}
    use-server {{ $ep.Name }} if { req.hdr({{ $backend.BlueGreen.HeaderName }}) {{ $ep.Label }} }
{{- end }}
{{- end }}
{{- end }}
{{- if $backend.BlueGreen.CookieName }}
{{- range $ep := $backend.Endpoints }}
{{- if $ep.Label }}
    use-server {{ $ep.Name }} if { req.cook({{ $backend.BlueGreen.CookieName }}) {{ $ep.Label }} }
{{- end }}
{{- end }}
{{- end }}
{{- range $ep := $backend.Endpoints }}
    server {{ $ep.Name }} {{ $ep.IP }}:{{ $ep.Port }}
        {{- if not $ep.Enabled }} disabled{{ end }}
        {{- "" }} weight {{ $ep.Weight }}
        {{- if and (not $backend.ModeTCP) ($backend.Cookie.Name) (not $backend.Cookie.Dynamic) }} cookie {{ $ep.Name }}{{ end }}
        {{- template "backend" map $backend }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}{{/* if has Backends */}}

{{- define "backend" }}
    {{- $backend := .p1 }}
    {{- $server := $backend.Server }}
    {{- if eq $server.Protocol "h2" }} proto h2
        {{- if $server.Secure }} alpn h2{{ end }}
    {{- end }}
    {{- if $server.MaxConn }} maxconn {{ $server.MaxConn }}{{ end }}
    {{- if $server.MaxQueue }} maxqueue {{ $server.MaxQueue }}{{ end }}
    {{- if $server.Secure }} ssl
        {{- if $server.Ciphers }} ciphers {{ $server.Ciphers }}{{ end }}
        {{- if $server.CipherSuites }} ciphersuites {{ $server.CipherSuites }}{{ end }}
        {{- if $server.Options }} {{ $server.Options }}{{ end }}
        {{- if $server.CrtFilename }} crt {{ $server.CrtFilename }}{{ end }}
        {{- if $server.CAFilename }} verify required ca-file {{ $server.CAFilename }}
            {{- if $server.CRLFilename }} crl-file {{ $server.CRLFilename }}{{ end }}
        {{- else }} verify none
        {{- end }}
    {{- end }}
    {{- if $server.SendProxy }} {{ $server.SendProxy }}{{ end }}
    {{- $agent := $backend.AgentCheck }}
    {{- $hc := $backend.HealthCheck }}
    {{- if or $hc.Port $hc.Addr $hc.Interval $hc.RiseCount $hc.FallCount }} check
        {{- if $hc.Port }} port {{ $hc.Port }}{{ end }}
        {{- if $hc.Addr }} addr {{ $hc.Addr }}{{ end }}
        {{- if $hc.Interval }} inter {{ $hc.Interval }}{{ end }}
        {{- if $hc.RiseCount }} rise {{ $hc.RiseCount }}{{ end }}
        {{- if $hc.FallCount }} fall {{ $hc.FallCount }}{{ end }}
    {{- end }}
    {{- if $agent.Port }} agent-check agent-port {{ $agent.Port }}
        {{- if $agent.Addr }} agent-addr {{ $agent.Addr }}{{ end }}
        {{- if $agent.Interval }} agent-inter {{ $agent.Interval }}{{ end }}
        {{- if $agent.Send }} agent-send {{ $agent.Send }}{{ end }}
    {{- end }}
{{- end }}

{{- if $cfg.Acme.Enabled }}

  # # # # # # # # # # # # # # # # # # #
# #
#     acme challenge server
#
backend _acme_challenge
    mode http
    server _acme_server unix@{{ $cfg.Acme.Socket }}
{{- end }}

{{- if not $cfg.DefaultBackend }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Error pages
#
backend _error404
    mode http
    http-request use-service lua.send-404
{{- end }}

{{- $fgroup := $cfg.FrontendGroup }}
{{- if $fgroup }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   FRONTENDS
# #
#
{{- $frontends := $fgroup.Frontends }}
{{- if $fgroup.HasTCPProxy }}

  # # # # # # # # # # # # # # # # # # #
# #
#     TCP/TLS frontend
#
listen _front__tls
    mode tcp
    bind {{ $global.Bind.HTTPSBind }}{{ if $global.Bind.AcceptProxy }} accept-proxy{{ end }}

{{- /*------------------------------------*/}}
{{- if $global.UseHTX }}
    no option http-use-htx
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $global.Syslog.HTTPSLogFormat "default" }}
    option tcplog
{{- else if $global.Syslog.HTTPSLogFormat }}
    log-format {{ $global.Syslog.HTTPSLogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    tcp-request inspect-delay 5s

{{- /*------------------------------------*/}}
{{- if $fgroup.HasSSLPassthrough }}
    tcp-request content set-var(req.sslpassback)
        {{- "" }} req.ssl_sni,lower,map({{ $fgroup.SSLPassthroughMap.MatchFile }})
{{- end }}
{{- if $fgroup.SSLPassthroughMap.HasRegex }}
{{- /*** TODO map_reg() running on every request ***/}}
    tcp-request content set-var(req.sslpassregback)
        {{- "" }} req.ssl_sni,lower,map_reg({{ $fgroup.SSLPassthroughMap.RegexFile }})
        {{- "" }} if !{ var(req.sslpassback) -m found }
{{- end }}

{{- /*------------------------------------*/}}
    tcp-request content accept if { req.ssl_hello_type 1 }

{{- /*------------------------------------*/}}
{{- if $fgroup.HasSSLPassthrough }}
    use_backend %[var(req.sslpassback)] if { var(req.sslpassback) -m found }
{{- end }}
{{- range $frontend := $frontends }}
{{- if $frontend.Hosts }}
{{- $bind := $frontend.Bind }}
    ## {{ $bind.Name }}
    use-server _server{{ $bind.Name }} if { req.ssl_sni -i -f {{ $bind.UseServerList.MatchFile }} }
    server _server{{ $bind.Name }} {{ $bind.Socket }} send-proxy-v2 weight 0
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $fgroup.SSLPassthroughMap.HasRegex }}
    use_backend %[var(req.sslpassback)] if { var(req.sslpassback) -m found }
{{- end }}
{{- range $frontend := $frontends }}
{{- $bind := $frontend.Bind }}
{{- if $bind.UseServerList.HasRegex }}
    ## {{ $bind.Name }} wildcard
    use-server _server{{ $bind.Name }}_wildcard if { req.ssl_sni -i -m reg -f {{ $bind.UseServerList.RegexFile }} }
    server _server{{ $bind.Name }}_wildcard {{ $bind.Socket }} send-proxy-v2 weight 0
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    # default backend
    server _default_server{{ $fgroup.DefaultBind.Name }} {{ $fgroup.DefaultBind.Socket }} send-proxy-v2
{{- end }}

{{- $hasFrontingProxy := $global.Bind.HasFrontingProxy }}

  # # # # # # # # # # # # # # # # # # #
# #
#     HTTP{{ if $hasFrontingProxy }} & Fronting Proxy{{ end }} frontend
#
frontend _front_http
    mode http
{{- $frontingBind := $fgroup.ToHTTPBind }}
{{- $hasPlainHTTPSocket := not $global.Bind.ShareHTTPPort }}
{{- if and $global.Bind.HTTPBind $hasPlainHTTPSocket }}
    bind {{ $global.Bind.HTTPBind }}{{ if $global.Bind.AcceptProxy }} accept-proxy{{ end }}
{{- end }}
{{- if $frontingBind.Socket }}
    bind {{ $frontingBind.Socket }}
        {{- if and $hasPlainHTTPSocket $frontingBind.ID }} id {{ $frontingBind.ID }}{{ end }}
        {{- if $frontingBind.AcceptProxy }} accept-proxy{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $hasFrontingProxy }}
{{- if $hasPlainHTTPSocket }}
    acl fronting-proxy so_id {{ $global.Bind.FrontingSockID }}
{{- else }}
    acl fronting-proxy hdr(X-Forwarded-Proto) -m found
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if $global.Syslog.HTTPLogFormat }}
    log-format {{ $global.Syslog.HTTPLogFormat }}
{{- else }}
    option httplog
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $hasFrontingProxy }}
    http-request redirect scheme https if
        {{- "" }} fronting-proxy !{ hdr(X-Forwarded-Proto) https }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $cfg.Acme.Enabled }}
    acl acme-challenge path_beg {{ $cfg.Acme.Prefix }}
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-var(req.base) base,lower,regsub(:[0-9]+/,/)

{{- /*------------------------------------*/}}
{{- $acmeexclusive := and $cfg.Acme.Enabled (not $cfg.Acme.Shared) }}
{{- if $fgroup.HTTPSRedirMap.HasRegex }}
    http-request set-var(req.redir)
        {{- "" }} var(req.base),map_beg({{ $fgroup.HTTPSRedirMap.MatchFile }})
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request redirect scheme https
        {{- "" }} if{{ if $acmeexclusive }} !acme-challenge{{ end }}
        {{- if $hasFrontingProxy }} !fronting-proxy{{ end }}
        {{- "" }} { var(req.redir) yes }
    http-request redirect scheme https
        {{- "" }} if{{ if $acmeexclusive }} !acme-challenge{{ end }}
        {{- if $hasFrontingProxy }} !fronting-proxy{{ end }}
        {{- "" }} !{ var(req.redir) -m found }
        {{- "" }} { var(req.base),map_reg({{ $fgroup.HTTPSRedirMap.RegexFile }}) yes }
{{- else }}
    http-request redirect scheme https
        {{- "" }} if{{ if $acmeexclusive }} !acme-challenge{{ end }}
        {{- if $hasFrontingProxy }} !fronting-proxy{{ end }}
        {{- "" }} { var(req.base),map_beg({{ $fgroup.HTTPSRedirMap.MatchFile }}) yes }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $fgroup.HTTPRootRedirMap.HasHost }}
    http-request set-var(req.host) hdr(host),lower,regsub(:[0-9]+$,)
    http-request set-var(req.rootredir)
        {{- "" }} var(req.host),map({{ $fgroup.HTTPRootRedirMap.MatchFile }})
{{- if $fgroup.HTTPRootRedirMap.HasRegex }}
    http-request set-var(req.rootredir)
        {{- "" }} var(req.host),map_reg({{ $fgroup.HTTPRootRedirMap.RegexFile }}) if !{ var(req.rootredir) -m found }
{{- end }}
    http-request redirect location %[var(req.rootredir)]
        {{- "" }} if{{ if $acmeexclusive }} !acme-challenge{{ end }}
        {{- "" }} { path / } { var(req.rootredir) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $fgroup.HasVarNamespace }}
    http-request set-var(txn.namespace) 
        {{- "" }} var(req.base),map_beg({{ $fgroup.VarNamespaceMap.MatchFile }},-)
{{- if $fgroup.VarNamespaceMap.HasRegex }}
    http-request set-var(txn.namespace) 
        {{- "" }} var(req.base),map_reg({{ $fgroup.VarNamespaceMap.RegexFile }},-)
        {{- "" }} if { var(txn.namespace) -- - }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-header X-Forwarded-Proto http
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-CN
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-DN
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-Cert
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}

{{- /*------------------------------------*/}}
    http-request set-var(req.backend) var(req.base),map_beg({{ $fgroup.HTTPFrontsMap.MatchFile }})
{{- if $fgroup.HTTPFrontsMap.HasRegex }}
    http-request set-var(req.backend)
        {{- "" }} var(req.base),map_reg({{ $fgroup.HTTPFrontsMap.RegexFile }})
        {{- "" }} if !{ var(req.backend) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomFrontend }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $acmeexclusive }}
    use_backend _acme_challenge if acme-challenge
{{- end }}
    use_backend %[var(req.backend)] if { var(req.backend) -m found }
{{- if and $cfg.Acme.Enabled $cfg.Acme.Shared }}
    use_backend _acme_challenge if acme-challenge
{{- end }}

{{- template "defaultbackend" map $cfg }}

  # # # # # # # # # # # # # # # # # # #
# #
#     HTTPS frontend
#
{{- range $frontend := $frontends }}
frontend {{ $frontend.Name }}
    mode http

{{- /*------------------------------------*/}}
{{- $bind := $frontend.Bind }}
{{- if $bind.Socket }}
    bind {{ $bind.Socket }}
        {{- if $bind.ID }} id {{ $bind.ID }}{{ end }}
        {{- if $bind.AcceptProxy }} accept-proxy{{ end }}
        {{- "" }} ssl alpn {{ $bind.ALPN }}
        {{- "" }} crt-list {{ $bind.CrtList.MatchFile }}
        {{- "" }} ca-ignore-err all crt-ignore-err all
{{- end }}

{{- /*------------------------------------*/}}
{{- if $frontend.Timeout.Client }}
    timeout client {{ $frontend.Timeout.Client }}
{{- end }}
{{- if $frontend.Timeout.ClientFin }}
    timeout client-fin {{ $frontend.Timeout.ClientFin }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if $global.Syslog.HTTPLogFormat }}
    log-format {{ $global.Syslog.HTTPLogFormat }}
{{- else }}
    option httplog
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $frontend.HasTLSAuth $frontend.HostBackendsMap.HasRegex $fgroup.HasVarNamespace $frontend.HasMaxBody }}
    http-request set-var(req.base) base,lower,regsub(:[0-9]+/,/)
    http-request set-var(req.hostbackend)
        {{- "" }} var(req.base),map_beg({{ $frontend.HostBackendsMap.MatchFile }})
{{- else }}
    http-request set-var(req.hostbackend) base,lower,regsub(:[0-9]+/,/)
        {{- "" }},map_beg({{ $frontend.HostBackendsMap.MatchFile }})
{{- end }}
{{- if $frontend.HostBackendsMap.HasRegex }}
    http-request set-var(req.hostbackend)
        {{- "" }} var(req.base),map_reg({{ $frontend.HostBackendsMap.RegexFile }})
        {{- "" }} if !{ var(req.hostbackend) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $frontend.HasTLSAuth $frontend.RootRedirMap.HasHost }}
    http-request set-var(req.host) hdr(host),lower,regsub(:[0-9]+$,)
{{- end }}
{{- if $frontend.RootRedirMap.HasHost }}
    http-request set-var(req.rootredir)
        {{- "" }} var(req.host),map({{ $frontend.RootRedirMap.MatchFile }})
{{- if $frontend.RootRedirMap.HasRegex }}
    http-request set-var(req.rootredir)
        {{- "" }} var(req.host),map_reg({{ $frontend.RootRedirMap.RegexFile }}) if !{ var(req.rootredir) -m found }
{{- end }}
    http-request redirect location %[var(req.rootredir)] if { path / } { var(req.rootredir) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $fgroup.HasVarNamespace }}
    http-request set-var(txn.namespace) 
        {{- "" }} var(req.base),map_beg({{ $fgroup.VarNamespaceMap.MatchFile }},-)
{{- if $fgroup.VarNamespaceMap.HasRegex }}
    http-request set-var(txn.namespace) 
        {{- "" }} var(req.base),map_reg({{ $fgroup.VarNamespaceMap.RegexFile }},-)
        {{- "" }} if { var(txn.namespace) -- - }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-header X-Forwarded-Proto https
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-CN
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-DN
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-Cert

{{- /*------------------------------------*/}}
{{- if $frontend.HasMaxBody }}
    http-request set-var(req.maxbody) var(req.base),map_beg_int({{ $frontend.MaxBodySizeMap.MatchFile }},0)
{{- end }}

{{- /*------------------------------------*/}}
{{- if $frontend.HasTLSAuth }}
{{- $mandatory := $frontend.HasTLSMandatory }}
    acl tls-has-crt ssl_c_used
{{- if $mandatory }}
    acl tls-need-crt ssl_fc_sni -i -f {{ $frontend.TLSNoCrtErrorList.MatchFile }}
{{- if $frontend.TLSNoCrtErrorList.HasRegex }}
    acl tls-need-crt ssl_fc_sni -i -m reg -f {{ $frontend.TLSNoCrtErrorList.RegexFile }}
{{- end }}
{{- end }}
    acl tls-host-need-crt var(req.host) -i -f {{ $frontend.TLSNoCrtErrorList.MatchFile }}
{{- if $frontend.TLSNoCrtErrorList.HasRegex }}
    acl tls-host-need-crt var(req.host) -i -m reg -f {{ $frontend.TLSNoCrtErrorList.RegexFile }}
{{- end }}
    acl tls-has-invalid-crt ssl_c_ca_err gt 0
    acl tls-has-invalid-crt ssl_c_err gt 0
    acl tls-check-crt ssl_fc_sni -i -f {{ $frontend.TLSInvalidCrtErrorList.MatchFile }}
{{- if $frontend.TLSInvalidCrtErrorList.HasRegex }}
    acl tls-check-crt ssl_fc_sni -i -m reg -f {{ $frontend.TLSInvalidCrtErrorList.RegexFile }}
{{- end }}
    http-request set-var(req.path) path
    http-request set-var(req.snibase) ssl_fc_sni,concat(,req.path),lower
{{- if $frontend.SNIBackendsMap.HasRegex }}
    http-request set-var(req.snibackend) var(req.snibase)
        {{- "" }},map_beg({{ $frontend.SNIBackendsMap.MatchFile }})
    http-request set-var(req.snibackend) var(req.snibase)
        {{- "" }},map_reg({{ $frontend.SNIBackendsMap.RegexFile }})
        {{- "" }} if !{ var(req.snibackend) -m found }
    http-request set-var(req.snibackend) var(req.base)
        {{- "" }},map_beg({{ $frontend.SNIBackendsMap.MatchFile }})
        {{- "" }} if !{ var(req.snibackend) -m found }
        {{- "" }} !tls-has-crt !tls-host-need-crt
    http-request set-var(req.snibackend) var(req.base)
        {{- "" }},map_reg({{ $frontend.SNIBackendsMap.RegexFile }})
        {{- "" }} if !{ var(req.snibackend) -m found }
        {{- "" }} !tls-has-crt !tls-host-need-crt
{{- else }}
    http-request set-var(req.snibackend) var(req.snibase)
        {{- "" }},map_beg({{ $frontend.SNIBackendsMap.MatchFile }})
    http-request set-var(req.snibackend) var(req.base)
        {{- "" }},map_beg({{ $frontend.SNIBackendsMap.MatchFile }})
        {{- "" }} if !{ var(req.snibackend) -m found }
        {{- "" }} !tls-has-crt !tls-host-need-crt
{{- end }}
{{- if $mandatory }}
    http-request set-var(req.tls_nocrt_redir) ssl_fc_sni,lower
        {{- "" }},map({{ $frontend.TLSNoCrtErrorPagesMap.MatchFile }},_internal)
        {{- "" }} if !tls-has-crt tls-need-crt
{{- if $frontend.TLSNoCrtErrorPagesMap.HasRegex }}
    http-request set-var(req.tls_nocrt_redir) ssl_fc_sni,lower
        {{- "" }},map_reg({{ $frontend.TLSNoCrtErrorPagesMap.RegexFile }},_internal)
        {{- "" }} if { var(req.tls_nocrt_redir) _internal }
{{- end }}
{{- end }}
    http-request set-var(req.tls_invalidcrt_redir) ssl_fc_sni,lower
        {{- "" }},map({{ $frontend.TLSInvalidCrtErrorPagesMap.MatchFile }},_internal)
        {{- "" }} if tls-has-invalid-crt tls-check-crt
{{- if $frontend.TLSInvalidCrtErrorPagesMap.HasRegex }}
    http-request set-var(req.tls_invalidcrt_redir) ssl_fc_sni,lower
        {{- "" }},map_reg({{ $frontend.TLSInvalidCrtErrorPagesMap.RegexFile }},_internal)
        {{- "" }} if { var(req.tls_invalidcrt_redir) _internal }
{{- end }}
{{- if and $mandatory $frontend.HasNoCrtErrorPage }}
    http-request redirect location %[var(req.tls_nocrt_redir)] code 303
        {{- "" }} if { var(req.tls_nocrt_redir) -m found } !{ var(req.tls_nocrt_redir) _internal }
{{- end }}
{{- if $frontend.HasInvalidErrorPage }}
    http-request redirect location %[var(req.tls_invalidcrt_redir)] code 303
        {{- "" }} if { var(req.tls_invalidcrt_redir) -m found } !{ var(req.tls_invalidcrt_redir) _internal }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomFrontend }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $frontend.HasMaxBody }}
    http-request use-service lua.send-413 if
        {{- "" }} !{ var(req.maxbody) 0 } { req.body_size,sub(req.maxbody) gt 0 }
{{- end }}
{{- if $frontend.HasTLSAuth }}
    http-request use-service lua.send-421 if
        {{- "" }} tls-has-crt { ssl_fc_has_sni } !{ ssl_fc_sni,strcmp(req.host) eq 0 }
{{- if $frontend.HasTLSMandatory }}
    http-request use-service lua.send-496 if
        {{- "" }} { var(req.tls_nocrt_redir) _internal }
{{- /* HTTP 421 instead of 404 if missing sni or the provided one doesn't read client crt. */}}
{{- /* Waiting move the tls-auth stuff to the backend to implement a proper config. */}}
    http-request use-service lua.send-421 if
        {{- "" }} !tls-has-crt tls-host-need-crt
{{- end }}
    http-request use-service lua.send-495 if
        {{- "" }} { var(req.tls_invalidcrt_redir) _internal }
{{- end }}

{{- /*------------------------------------*/}}
    use_backend %[var(req.hostbackend)]
        {{- "" }} if { var(req.hostbackend) -m found }
{{- if $frontend.HasTLSAuth }}
    use_backend %[var(req.snibackend)]
        {{- "" }} if { var(req.snibackend) -m found }
{{- end }}
{{- template "defaultbackend" map $cfg }}
{{- end }}

{{- end }}{{/* if $fgroup */}}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "defaultbackend" }}
{{- $cfg := .p1 }}
{{- if $cfg.DefaultHost }}
{{- range $path := $cfg.DefaultHost.Paths }}
    use_backend {{ $path.Backend.ID }}
        {{- if ne $path.Path "/" }} if { path_beg {{ $path.Path }} }{{ end }}
{{- end }}
{{- end }}
{{- if $cfg.DefaultBackend }}
    default_backend {{ $cfg.DefaultBackend.ID }}
{{- else }}
    default_backend _error404
{{- end }}
{{- end }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   SUPPORT
# #
#

  # # # # # # # # # # # # # # # # # # #
# #
#     Stats
#
listen stats
    mode http
    bind {{ $global.Stats.BindIP }}:{{ $global.Stats.Port }}
        {{- if $global.Stats.TLSFilename }} ssl crt {{ $global.Stats.TLSFilename }}{{ end }}
        {{- if $global.Stats.AcceptProxy }} accept-proxy{{ end }}
        {{- if gt $global.Procs.Nbproc 1 }} process 1{{ end }}
{{- if $global.Stats.Auth }}
    stats realm HAProxy\ Statistics
    stats auth {{ $global.Stats.Auth }}
{{- end }}
    stats enable
    stats uri /
    no log
    option forceclose
    stats show-legends

  # # # # # # # # # # # # # # # # # # #
# #
#     Monitor URI
#
frontend healthz
    mode http
    bind {{ $global.Healthz.BindIP }}:{{ $global.Healthz.Port }}
    monitor-uri /healthz
    no log

{{- if $global.ModSecurity.Endpoints }}

  # # # # # # # # # # # # # # # # # # #
# #
#     ModSecurity Agent
#
backend spoe-modsecurity
    mode tcp
    timeout connect 5s
    timeout server  5s
{{- if $global.UseHTX }}
    no option http-use-htx
{{- end }}
{{- range $i, $endpoint := $global.ModSecurity.Endpoints }}
    server modsec-spoa{{ $i }} {{ $endpoint }}
{{- end }}

{{- end }}
